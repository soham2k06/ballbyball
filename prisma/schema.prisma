datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

// AUTH
model User {
  id            String    @id @default(auto()) @map("_id") @db.ObjectId
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?

  hashedPassword String?

  accounts Account[]
  sessions Session[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("users")
}

model Account {
  id                String  @id @default(auto()) @map("_id") @db.ObjectId
  userId            String  @db.ObjectId
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.String
  access_token      String? @db.String
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.String
  session_state     String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(auto()) @map("_id") @db.ObjectId
  sessionToken String   @unique
  userId       String   @db.ObjectId
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("sessions")
}

model VerificationToken {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  identifier String
  token      String
  expires    DateTime

  @@unique([identifier, token])
  @@map("verificationTokens")
}

// Analytics
enum AnalyticsEvent {
  page_view
  click
}

enum AnalyticsModule {
  players
  matches
  scorer
  teams
  stats
  instant_scorer
  guide
  home
  auth
  other
}

model Analytics {
  id     String  @id @default(auto()) @map("_id") @db.ObjectId
  userId String?

  event    AnalyticsEvent
  property String // eg. "/players", "start_match", "btn-add_player", "nav_link"
  module   AnalyticsModule
  country  String?
  city     String?
  os       String?
  browser  String?
  device   String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("analytics")
}

// Actual Models
model Match {
  id                String      @id @default(auto()) @map("_id") @db.ObjectId
  userId            String
  name              String
  overs             Int
  curTeam           Int
  allowSinglePlayer Boolean     @default(false)
  strikeIndex       Int         @default(0)
  hasEnded          Boolean     @default(false)
  curPlayers        CurPlayer[]
  ballEvents        BallEvent[]
  matchTeams        MatchTeam[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("matches")
}

model Player {
  id          String       @id @default(auto()) @map("_id") @db.ObjectId
  userId      String
  name        String
  image       String?
  teamId      String?      @db.ObjectId
  teamPlayers TeamPlayer[]
  order       Int?

  createdAt        DateTime    @default(now())
  updatedAt        DateTime    @updatedAt
  playerBatEvents  BallEvent[] @relation("playerBatsman")
  playerBallEvents BallEvent[] @relation("playerBowler")

  @@map("players")
}

model Team {
  id          String       @id @default(auto()) @map("_id") @db.ObjectId
  userId      String
  name        String
  captain     String?      @db.ObjectId
  matchId     String?      @db.ObjectId
  matchTeams  MatchTeam[]
  teamPlayers TeamPlayer[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("teams")
}

model TeamPlayer {
  id       String @id @default(auto()) @map("_id") @db.ObjectId
  team     Team   @relation(fields: [teamId], references: [id])
  teamId   String @db.ObjectId
  player   Player @relation(fields: [playerId], references: [id])
  playerId String @db.ObjectId

  @@map("teamPlayers")
}

model MatchTeam {
  id       String   @id @default(auto()) @map("_id") @db.ObjectId
  batFirst Boolean?
  team     Team     @relation(fields: [teamId], references: [id])
  teamId   String   @db.ObjectId
  match    Match    @relation(fields: [matchId], references: [id])
  matchId  String   @db.ObjectId

  @@map("matchTeams")
}

model BallEvent {
  id        String  @id @default(auto()) @map("_id") @db.ObjectId
  userId    String
  batsman   Player  @relation("playerBatsman", fields: [batsmanId], references: [id])
  batsmanId String  @db.ObjectId
  bowler    Player  @relation("playerBowler", fields: [bowlerId], references: [id])
  bowlerId  String  @db.ObjectId
  type      String
  Match     Match?  @relation(fields: [matchId], references: [id])
  matchId   String? @db.ObjectId

  @@map("ballEvents")
}

type CurPlayer {
  id   String     @db.ObjectId
  type PlayerType
}

enum PlayerType {
  batsman
  bowler
}
